{
	"info": {
		"_postman_id": "92803168-332e-4234-96a5-b89b9db41ef5",
		"name": "postman_hw_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var token_2 = jsonData.token;\r",
							"\r",
							"pm.environment.set(\"token2\", token_2);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "str",
							"type": "text"
						},
						{
							"key": "password",
							"value": "str",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"var jsonData = pm.response.json();\r",
							"const reqData = request.data;\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"var schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"const response = pm.response.json();\r",
							"    pm.test('Schema is valid', () => {\r",
							"        pm.expect(response).to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Salary multiplier test after 1.5 year\", function() {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary*4);\r",
							"})\r",
							"\r",
							"pm.test(\"Salary multiplier test after 12 months\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary*2.9);\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary*2);\r",
							"})\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"var salary_hw_3 = jsonData.person.u_salary_1_5_year;\r",
							"pm.environment.set(\"salary_hw_3\", salary_hw_3);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"age\": \"{{age}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"auth_token\": \"{{token2}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const reqData = request.data;\r",
							"\r",
							"// проверка структуры json\r",
							"var schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"const response = pm.response.json();\r",
							"    pm.test('Schema is valid', () => {\r",
							"        pm.expect(response).to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"pm.test(\"Check age\",function() {\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"})\r",
							"\r",
							"pm.test(\"Check name\",function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"pm.test(\"Check salary\",function() {\r",
							"    pm.expect(jsonData).to.have.property('salary');\r",
							"})\r",
							"\r",
							"pm.test(\"Check salary multiplier\", function() {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"})\r",
							"pm.test(\"Check salary multiplier\", function() {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+reqData.salary*2);\r",
							"})\r",
							"pm.test(\"Check salary multiplier\", function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+reqData.salary*3);\r",
							"})\r",
							"\r",
							"// проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Check if salary[2] more than 0,\", function() {\r",
							"    pm.expect(jsonData.salary[2])>(jsonData.salary[0]);\r",
							"})\r",
							"pm.test(\"Check if salary[2] more than 0,\", function() {\r",
							"    pm.expect(jsonData.salary[2])>(jsonData.salary[1]);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const reqData = request.data;\r",
							"\r",
							"//проверка структуры\r",
							"var schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"const response = pm.response.json();\r",
							"    pm.test('Schema is valid', () => {\r",
							"        pm.expect(response).to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"// проверка умножения\r",
							"pm.test(\"Check age\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"})\r",
							"pm.test(\"dayly_food\", function() {\r",
							"    pm.expect(jsonData.daily_food).to.eql(reqData.weight*0.012);\r",
							"})\r",
							"pm.test(\"Check sleep\", function() {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(reqData.weight*2.5);\r",
							"})\r",
							"pm.test(\"Name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "7",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "20",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Luky",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200); \r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const reqData = request.data;\r",
							"// проверка структуры\r",
							"var schema = \r",
							"{\r",
							"   \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"const response = pm.response.json();\r",
							"    pm.test('Schema is valid', () => {\r",
							"        pm.expect(response).to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"// Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"Check name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"// Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Check name\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Можете взять любой объект из присланного списка, используйте js random.\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"var currency = jsonData;\r",
							"\r",
							"var randomCurrency = currency[Math.floor(Math.random() * currency.length)];\r",
							"\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"pm.environment.set(\"randomCurrency\", randomCurrency.Cur_ID);\r",
							"\r",
							"console.log(randomCurrency);\r",
							"console.log(randomCurrency.Cur_ID);\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"// var salary_hw_3 = jsonData.person.u_salary_1_5_year;\r",
							"// pm.environment.set(\"salary_hw_3\", salary_hw_3);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"var jsonData = pm.response.json();\r",
							"var schema = \r",
							"{ \r",
							"    \"type\":\"object\",\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\":\"integer\"\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\":\"string\"\r",
							"        }\r",
							"    },\r",
							"        \"required\": [\r",
							"            \"Cur_Abbreviation\",\r",
							"            \"Cur_ID\",\r",
							"            \"Cur_Name\",\r",
							"            \"Cur_OfficialRate\",\r",
							"            \"Cur_Scale\",\r",
							"            \"Date\"\r",
							"        ]\r",
							"    }\r",
							"\r",
							"const response = pm.response.json();\r",
							"    pm.test('Schema is valid', () => {\r",
							"        pm.expect(response).to.have.jsonSchema(schema);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token2}}",
							"type": "string"
						},
						{
							"key": "curr_code",
							"value": "426",
							"contentType": "",
							"type": "string"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}